{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Gradient descent project - Boston Dataset\n",
    "\n",
    "come up with Gradient Descent algorithm and thus predictions for the test dataset given."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn import preprocessing\n",
    "train_data=np.genfromtxt('boston_x_y_train.csv',delimiter=',')\n",
    "test_data=np.genfromtxt('boston_x_test.csv',delimiter=',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(379, 14)"
      ]
     },
     "execution_count": 331,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 332,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(127, 13)"
      ]
     },
     "execution_count": 332,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 333,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train=train_data[:,0:13]\n",
    "x_train=preprocessing.scale(x_train)\n",
    "y_train=train_data[:,13]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(379, 14)"
      ]
     },
     "execution_count": 334,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train=pd.DataFrame(x_train)\n",
    "x_train['13']=1\n",
    "x_train=np.array(x_train)\n",
    "x_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 335,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(127, 14)"
      ]
     },
     "execution_count": 335,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data=preprocessing.scale(test_data)\n",
    "test_data=pd.DataFrame(test_data)\n",
    "test_data[13]=1\n",
    "test_data=np.array(test_data)\n",
    "test_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 350,
   "metadata": {},
   "outputs": [],
   "source": [
    "def single_gradient(x_train,y_train, learning_rate,m):  \n",
    "    m_slope = [0 for i in range(x_train.shape[1])]\n",
    "    M = x_train.shape[0]\n",
    "    N = x_train.shape[1]\n",
    "    for j in range(N):\n",
    "        for i in range(M):\n",
    "            x = x_train[i]\n",
    "            y = y_train[i]\n",
    "            a = sum(m*x)\n",
    "            m_slope[j] += (-2/M)* (y - a)*x[j]\n",
    "    m_slope=np.array(m_slope)\n",
    "    \n",
    "    new_m=m-m_slope*learning_rate   \n",
    "    return new_m\n",
    "            \n",
    "def gd(x_train,y_train, learning_rate, num_iterations):\n",
    "    m = [0 for i in range(x_train.shape[1])]\n",
    "    for i in range(num_iterations):\n",
    "        m = single_gradient(x_train,y_train,learning_rate,m)\n",
    "        #print(i, \" Cost: \", cost(x_train,y_train,m))\n",
    "    return m\n",
    "\n",
    "def cost(x_train,y_train, m):\n",
    "    total_cost = 0\n",
    "    M = x_train.shape[0]\n",
    "    for i in range(M):\n",
    "        x = x_train[i]\n",
    "        y = y_train[i]\n",
    "        a = sum(m*x)\n",
    "        total_cost += (1/M)*((y - a)**2)\n",
    "    return total_cost\n",
    "\n",
    "def run():\n",
    "    learning_rate = 0.16\n",
    "    num_iterations = 200\n",
    "    m = gd(x_train,y_train, learning_rate, num_iterations)\n",
    "    return m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 351,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-9.98316871e-01,  7.36112607e-01, -1.60538924e-03,  8.19597669e-01,\n",
       "       -2.16911408e+00,  2.35546814e+00,  1.19928978e-01, -3.03135137e+00,\n",
       "        2.54226756e+00, -1.70103472e+00, -2.24814828e+00,  5.96288518e-01,\n",
       "       -4.32278044e+00,  2.26094987e+01])"
      ]
     },
     "execution_count": 351,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(x_test):\n",
    "    m=run()\n",
    "    y_predict=[]\n",
    "    for i in range(len(x_test)):\n",
    "        a=sum(x_test[i]*m)\n",
    "        y_predict.append(a)\n",
    "    return y_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "metadata": {},
   "outputs": [],
   "source": [
    "def score(y_true,y_predict):\n",
    "    u=sum((y_true-y_predict)**2)\n",
    "    v=sum((y_true-y_true.mean())**2)\n",
    "    return 1-u/v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 352,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[34.15346660572179,\n",
       " 24.53100984474196,\n",
       " 13.527493502013094,\n",
       " 18.957990503649743,\n",
       " 22.378821914100822,\n",
       " 30.66388087769179,\n",
       " 22.437766922501975,\n",
       " 20.901395169832142,\n",
       " 20.354008287413127,\n",
       " 36.22012351981157,\n",
       " 25.250571508061178,\n",
       " 23.394732529317626,\n",
       " 42.841598979738485,\n",
       " 26.441093994835548,\n",
       " 22.583748792753084,\n",
       " 19.055529442615434,\n",
       " 23.0785163016852,\n",
       " 19.94808407121961,\n",
       " 19.49054119387958,\n",
       " 33.51951245477976,\n",
       " 20.946365981919605,\n",
       " 30.98974283707257,\n",
       " 35.1343853371657,\n",
       " 25.968350670993786,\n",
       " 21.252641570743766,\n",
       " 19.579849747786334,\n",
       " 13.369857419072146,\n",
       " 33.06318991609561,\n",
       " 28.410988127888373,\n",
       " 29.39917932336015,\n",
       " 27.218881442867335,\n",
       " 19.708353448499324,\n",
       " 32.67237028849408,\n",
       " 16.93023125413442,\n",
       " 35.01238153132307,\n",
       " 6.81412052680912,\n",
       " 9.545424627877239,\n",
       " 14.372276480102585,\n",
       " 34.480202704548645,\n",
       " 23.793164024055894,\n",
       " 17.517339725814534,\n",
       " 30.017644677060673,\n",
       " 25.705733459292702,\n",
       " 12.737601554128624,\n",
       " 14.219678422795909,\n",
       " 19.630342774733634,\n",
       " 26.86502845931955,\n",
       " 24.658321391813104,\n",
       " 7.925090989879031,\n",
       " 13.26845140696579,\n",
       " 14.518751639545032,\n",
       " 19.664296434395204,\n",
       " 18.897211064931337,\n",
       " 38.297533524043025,\n",
       " 25.331006024547133,\n",
       " 12.575625245430164,\n",
       " 25.082166369982794,\n",
       " 17.795737087618622,\n",
       " 28.534330595850594,\n",
       " 30.884366126487986,\n",
       " 14.614045510158485,\n",
       " 18.448288514799223,\n",
       " 35.385892169453264,\n",
       " 14.06034549501991,\n",
       " 16.997672366278493,\n",
       " 25.609722763359976,\n",
       " 19.4481564808264,\n",
       " 16.410398121953538,\n",
       " 12.250100723854503,\n",
       " 44.2836021644693,\n",
       " 18.928318167219658,\n",
       " 30.326718339484838,\n",
       " 11.374863218732179,\n",
       " 26.072020131411115,\n",
       " 20.615524604343733,\n",
       " 19.933515880703418,\n",
       " 17.335928835375228,\n",
       " 33.12943963074517,\n",
       " 7.738145929239263,\n",
       " 21.610520613959828,\n",
       " 14.949090160041438,\n",
       " 27.28442811318594,\n",
       " 26.787453851165775,\n",
       " 25.985119740333413,\n",
       " 8.368056948306602,\n",
       " 20.057954711905836,\n",
       " 12.610148133724659,\n",
       " 17.531034140052146,\n",
       " 19.296730666886067,\n",
       " 13.352727147242883,\n",
       " 18.201319521758137,\n",
       " 22.553460618548513,\n",
       " 20.162799880490454,\n",
       " 31.478819953994243,\n",
       " 30.84206133614802,\n",
       " 35.300490631757526,\n",
       " 19.1269765670116,\n",
       " 21.895144204308338,\n",
       " 40.99019537194678,\n",
       " 27.35007384709706,\n",
       " 19.974412847356014,\n",
       " 22.50046479502492,\n",
       " 28.730159938491642,\n",
       " 17.03167207272857,\n",
       " 29.01236313672377,\n",
       " 12.220435438133688,\n",
       " 15.670539164721232,\n",
       " 25.475816501996878,\n",
       " 32.5302379964201,\n",
       " 15.070715903644938,\n",
       " 22.35081670995882,\n",
       " 21.572283643278038,\n",
       " 19.770008068539866,\n",
       " 15.848144881657241,\n",
       " 23.026827396204244,\n",
       " 27.204583775612075,\n",
       " 17.971969441828477,\n",
       " 13.006323517748639,\n",
       " 15.103316686291913,\n",
       " 19.756688876992303,\n",
       " 26.384912870108415,\n",
       " 35.90217373572294,\n",
       " 23.430773100667622,\n",
       " 28.88842157177937,\n",
       " 32.69935789442106,\n",
       " 30.705198447372602,\n",
       " 21.70987978017045,\n",
       " 5.6296915682537225,\n",
       " 20.901254993818934,\n",
       " 15.628421687810576,\n",
       " 34.20068272655671,\n",
       " 36.52313900595325,\n",
       " 19.10784945014053,\n",
       " 13.154666015596614,\n",
       " 26.174937289914645,\n",
       " 32.34121068354236,\n",
       " 35.26195627311425,\n",
       " 22.377247514669723,\n",
       " 27.530545837246734,\n",
       " 27.658571152942084,\n",
       " 20.566777354245858,\n",
       " 16.96797659334629,\n",
       " 30.86471371189474,\n",
       " 12.906973610463302,\n",
       " 16.106390446436905,\n",
       " 11.088364030807957,\n",
       " 24.078775397750057,\n",
       " 19.223185683630216,\n",
       " 24.23055338512577,\n",
       " 24.938401273924026,\n",
       " 33.66843643472659,\n",
       " 24.318604923261606,\n",
       " 22.72144013386876,\n",
       " 16.566810093842076,\n",
       " 17.2084718681344,\n",
       " 13.299634129685552,\n",
       " 23.59839762231193,\n",
       " 15.82339834353488,\n",
       " 14.741900558031038,\n",
       " 26.996058455816105,\n",
       " 23.04138712022112,\n",
       " 21.44353691476058,\n",
       " 11.534934995174032,\n",
       " 24.73276921575092,\n",
       " 22.751077116231006,\n",
       " 15.434995806498767,\n",
       " 31.2110453150336,\n",
       " 32.783188274841365,\n",
       " 17.11926238927033,\n",
       " 16.507663394657214,\n",
       " 3.6152972946802784,\n",
       " 27.49834640082433,\n",
       " 33.77057502687543,\n",
       " 29.74018428772532,\n",
       " 21.993363953808547,\n",
       " 32.73073882769462,\n",
       " 19.006155589994247,\n",
       " 19.825690984446318,\n",
       " 17.784146248209126,\n",
       " 12.286766750923704,\n",
       " 4.7732559284467975,\n",
       " 21.05554138012992,\n",
       " 40.4534981665378,\n",
       " 25.15814123319575,\n",
       " 7.099943930700187,\n",
       " 18.20870592798312,\n",
       " 38.10769213934691,\n",
       " 19.059364312379564,\n",
       " 27.919441742034806,\n",
       " 22.473661733250125,\n",
       " 30.96338857369905,\n",
       " 18.273459184101547,\n",
       " 25.23383203191605,\n",
       " 23.838704633086344,\n",
       " 19.800099705773984,\n",
       " 24.811055020580174,\n",
       " 16.862115111821154,\n",
       " 19.536750484540892,\n",
       " 13.670161475888445,\n",
       " 24.861793938572504,\n",
       " 35.867423501273315,\n",
       " 23.04028060974761,\n",
       " 37.152237081591096,\n",
       " 16.0220974719295,\n",
       " 17.917525110091276,\n",
       " 28.297200114036116,\n",
       " 31.903970447169083,\n",
       " 39.581941766346645,\n",
       " 23.275681809158367,\n",
       " 25.437579223217256,\n",
       " 8.150340114269627,\n",
       " 29.80065516686416,\n",
       " 9.196268805571975,\n",
       " 12.5512007692344,\n",
       " 14.893987816693176,\n",
       " 18.50586738687755,\n",
       " 20.920907873221715,\n",
       " 18.023927272545556,\n",
       " 24.19768274005629,\n",
       " 18.80252968098707,\n",
       " 21.284007689466094,\n",
       " 28.986750923053677,\n",
       " 19.234752082507672,\n",
       " 32.07070848290502,\n",
       " 10.418488903740652,\n",
       " 2.0718609101562677,\n",
       " 27.35881597749989,\n",
       " 20.397979252227646,\n",
       " 26.78037983754463,\n",
       " 21.75792243928626,\n",
       " 20.796071919323545,\n",
       " 20.78163558755987,\n",
       " 17.756047183963027,\n",
       " 13.309557796418073,\n",
       " 30.317607002795334,\n",
       " 34.708931740996974,\n",
       " 13.707273033217614,\n",
       " 15.83207708484426,\n",
       " 30.166940992191826,\n",
       " 22.425807692543927,\n",
       " 31.733254647378317,\n",
       " 32.96092519108515,\n",
       " 28.02812175045085,\n",
       " 28.44468581763216,\n",
       " 23.48297127758357,\n",
       " 42.15092947503606,\n",
       " 19.070329458246896,\n",
       " 35.495104757485116,\n",
       " 11.016112683198253,\n",
       " 11.665660418546675,\n",
       " 17.264457287910094,\n",
       " 19.58701057006936,\n",
       " 25.74710366874572,\n",
       " 19.88319027475803,\n",
       " 27.918937232544536,\n",
       " 24.177780453443436,\n",
       " 16.726987231401225,\n",
       " 18.53322140174613,\n",
       " 18.65101990279919,\n",
       " 18.790699381274553,\n",
       " 28.51616316222549,\n",
       " 21.67299548964398,\n",
       " 25.025414484342726,\n",
       " 15.794111675630756,\n",
       " 21.439630144690618,\n",
       " 22.901276013688452,\n",
       " 4.375301847865739,\n",
       " 8.282333704682571,\n",
       " 25.18499827004424,\n",
       " 25.214047209170953,\n",
       " 23.339024188016438,\n",
       " 38.90514917878265,\n",
       " 24.34592128737258,\n",
       " 25.345757048676244,\n",
       " 13.199647457523161,\n",
       " 23.97182492207354,\n",
       " 25.698151110126705,\n",
       " 23.541423513478456,\n",
       " 30.860038604306496,\n",
       " 13.490633172433798,\n",
       " 37.50654153495016,\n",
       " 32.6774983918379,\n",
       " 35.652198448272244,\n",
       " 33.59748154873919,\n",
       " 18.516998704045093,\n",
       " 31.085792425280125,\n",
       " 20.872670812882504,\n",
       " 16.69925247255655,\n",
       " 16.726528033007334,\n",
       " 14.571553157001162,\n",
       " 40.66973356228931,\n",
       " 5.1786217736835845,\n",
       " 25.815623397044316,\n",
       " 28.581454179188896,\n",
       " 23.200489093626633,\n",
       " 19.798757571950205,\n",
       " 23.906038592092255,\n",
       " 20.9925007763378,\n",
       " 13.71568765611424,\n",
       " 31.80639931952342,\n",
       " 28.78436724990053,\n",
       " 37.4010955864764,\n",
       " 28.07059655657154,\n",
       " 22.672690969251548,\n",
       " 28.233975133888546,\n",
       " 28.6939195595024,\n",
       " 20.162815582999272,\n",
       " 10.212695094504202,\n",
       " 20.63930377751389,\n",
       " 37.734759941996984,\n",
       " 13.88835126477862,\n",
       " 18.51737234735496,\n",
       " 24.543452193213486,\n",
       " 34.646887893958464,\n",
       " 24.38427406705854,\n",
       " 25.051665652570527,\n",
       " 16.344642665762514,\n",
       " 32.474578721428884,\n",
       " 22.624848716023045,\n",
       " 22.733655000150662,\n",
       " 25.365476307500344,\n",
       " 19.958306962973666,\n",
       " 15.396489467824978,\n",
       " 16.838541494288343,\n",
       " 33.409256202569395,\n",
       " 34.69077257339959,\n",
       " 30.397351374165343,\n",
       " 7.205708346486414,\n",
       " 21.28055032692345,\n",
       " 21.668883803987896,\n",
       " 23.251908288723552,\n",
       " 22.86019936523036,\n",
       " 6.799874477787839,\n",
       " 30.970662175086357,\n",
       " 14.229529562342893,\n",
       " 21.11094839188044,\n",
       " 15.545163256637618,\n",
       " 33.652226793375284,\n",
       " 27.98813108735741,\n",
       " 9.949837751788813,\n",
       " 25.598222636482703,\n",
       " 20.432396007489654,\n",
       " 17.5079157942968,\n",
       " 17.92729389891535,\n",
       " 9.000365441296116,\n",
       " 21.833268842554993,\n",
       " 21.29071130411093,\n",
       " 37.124127323908354,\n",
       " 18.777918499466924,\n",
       " 11.350051410527616,\n",
       " 21.286811338324593,\n",
       " 21.4161307914615,\n",
       " 21.129527904689166,\n",
       " 31.190178067854497,\n",
       " 15.603377819355341,\n",
       " -4.355379547076424,\n",
       " 25.391741708703847,\n",
       " 34.095464662502,\n",
       " 13.640797871356916,\n",
       " 18.328003475438408,\n",
       " 21.828490566498353,\n",
       " 29.91153842124993,\n",
       " 19.63406075876612,\n",
       " 37.38154915847886,\n",
       " 11.101904329158467,\n",
       " 24.455484365794828,\n",
       " 22.155803078927583,\n",
       " 19.420606021150984,\n",
       " 16.91921876944217,\n",
       " 23.816360328228615,\n",
       " 27.16995791067294,\n",
       " 23.969697651231353,\n",
       " 13.95257419504803,\n",
       " 18.867562154920428,\n",
       " 41.39327922048638,\n",
       " 17.58897255721576,\n",
       " 23.853179247592173,\n",
       " 25.314258212863287,\n",
       " 35.46264884101927]"
      ]
     },
     "execution_count": 352,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_predict=predict(x_train)\n",
    "y_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 354,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7331350812160657"
      ]
     },
     "execution_count": 354,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_true=y_train\n",
    "score(y_true,y_predict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 327,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[11.115734856175013,\n",
       " 28.713171377068335,\n",
       " 22.52833643979306,\n",
       " 23.97300049117997,\n",
       " 20.53617244534199,\n",
       " 1.9105997924969955,\n",
       " 30.53880763429573,\n",
       " 24.800597497158062,\n",
       " 18.478583532878122,\n",
       " 23.507199376498594,\n",
       " 23.92369308662857,\n",
       " 17.396787761226673,\n",
       " 16.566534167807998,\n",
       " 21.20435045239875,\n",
       " 43.41642772574869,\n",
       " 23.282659307189178,\n",
       " 24.21333954891902,\n",
       " 27.606271963719482,\n",
       " 19.502510430814016,\n",
       " 31.29414326741958,\n",
       " 23.72830629871154,\n",
       " 24.861924668304628,\n",
       " 34.246399733565795,\n",
       " 37.36147264260812,\n",
       " 31.442247576534946,\n",
       " 16.259722331035796,\n",
       " 23.411213383450967,\n",
       " 32.862907734447106,\n",
       " 25.7368682781749,\n",
       " 34.63773368515974,\n",
       " 16.501917687438997,\n",
       " 25.929974474838964,\n",
       " 23.382802931874043,\n",
       " 25.223964121440094,\n",
       " 13.910621217805396,\n",
       " 29.7465487436546,\n",
       " 26.029245252881466,\n",
       " 20.286451361658088,\n",
       " 23.88454302731346,\n",
       " 8.162177389225743,\n",
       " 7.393077581962821,\n",
       " 28.715755379418525,\n",
       " 28.963835158203118,\n",
       " 19.719356168964204,\n",
       " 20.066515713641344,\n",
       " 1.8456450578849228,\n",
       " 39.875116110908436,\n",
       " 25.666517888816205,\n",
       " 29.73664613879875,\n",
       " 16.32338457706242,\n",
       " 17.422318799057308,\n",
       " 41.00462391121488,\n",
       " 17.13159861296003,\n",
       " 20.931945522527137,\n",
       " 15.129732328362996,\n",
       " 21.2430586329958,\n",
       " 18.07808538821234,\n",
       " 23.087951770281922,\n",
       " 13.141955614419354,\n",
       " 16.797189581473937,\n",
       " 13.444358446453723,\n",
       " 29.32181163349793,\n",
       " 25.063543031420206,\n",
       " 25.42305920809408,\n",
       " 16.956278277861152,\n",
       " 16.850271749324882,\n",
       " 34.945777207471274,\n",
       " 16.58849409370182,\n",
       " 27.79953946734227,\n",
       " 22.340589115703825,\n",
       " 29.31819275827599,\n",
       " 27.035468398727986,\n",
       " 17.55892461267751,\n",
       " 4.396266197997676,\n",
       " 36.634004864728816,\n",
       " 24.88156803538249,\n",
       " 30.13640561326756,\n",
       " 27.207680244944786,\n",
       " 15.462604334619238,\n",
       " 31.927721961218232,\n",
       " 19.213248352652382,\n",
       " 22.667317904994942,\n",
       " 21.81360036495408,\n",
       " 7.331027681071269,\n",
       " 16.897793249563843,\n",
       " 29.033491935742944,\n",
       " 26.675058230193315,\n",
       " 4.848605478490786,\n",
       " 21.917414417826922,\n",
       " 19.89563048009288,\n",
       " 21.819863656057183,\n",
       " 20.454183491762947,\n",
       " 20.630978733650366,\n",
       " 12.805801575181487,\n",
       " 19.512778086101164,\n",
       " 26.18640226926483,\n",
       " 40.18210968179339,\n",
       " 19.659000287796427,\n",
       " 33.668091919122624,\n",
       " 26.671047863499567,\n",
       " 28.937024255095807,\n",
       " 21.47913069972459,\n",
       " 26.47439919892758,\n",
       " 31.539573679961084,\n",
       " 16.69517760179413,\n",
       " 26.36892332988799,\n",
       " 20.908479729346766,\n",
       " 36.43574359469147,\n",
       " 21.51293869800451,\n",
       " 16.075704795667054,\n",
       " 26.920267016550948,\n",
       " -1.476364182862575,\n",
       " 13.472074841676609,\n",
       " 16.26947558584029,\n",
       " 36.08909571368401,\n",
       " 20.746111162513564,\n",
       " 20.492949714316023,\n",
       " 25.270777898318606,\n",
       " 21.281165903297502,\n",
       " 18.82261791598114,\n",
       " 12.951253037687733,\n",
       " 35.75118747631069,\n",
       " 22.848250049325888,\n",
       " 24.60652961714363,\n",
       " 16.20665903519554,\n",
       " 20.728239657239417,\n",
       " 14.43266788393173]"
      ]
     },
     "execution_count": 327,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_predict=predict(test_data)\n",
    "y_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "metadata": {},
   "outputs": [],
   "source": [
    " np.savetxt('predictions3.csv',y_predict) "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
